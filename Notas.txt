Nueva idea es hacer un juego que sea como base para elaborar un sistema en el que los agentes sean capaces de manejar la economia y sean capaces de generar comportamientos emergentes

La idea es que los agentes aprendan sobre la marcha, que puedan establecer nuevas reglas sobre la marcha. (Buscar info sobre como programar comportamientos emergentes para que puedan "programarse 
a si mismo")

Las reglas pueden ser del tipo de si tienen x mateeriales pueden hacer distintas cosas, primero que jueguen con unas reglas "más estrictas" para tener una idea del funcionamiento principal.
Una vez tenga eso les puedo dar la posibilidad de hacer algo basado en la economia y unos objetivos

Ideas de la reunión:
--> Hacer las reglas como Objetos que fuese la accion que se va a realizar esa accion que haya distintos tipos de accion, medir la economia de la civilizacion como iba crececiendo.
(Tener una economía que vaya incrementando y decreciendo en función de los activos que tenga esa civilización si crece es algo positivo porque la civilización con mejor economía será la ganadora)

--> De tecnologías que permitieran hacer distintas cosas, metal y algun tipo de dinero 

Entorno en el que haya reglas para que estén compitiendo los agentes para que produzcan cosas y beneficios 
una cosa son las posibilidades y otras las oportunidades.

Exploracion la nave tenga una vision clara para que se puiedan ir mejorando con nuevas tecnologías
(Puedo hacer que puedan crear naves para la exploración y esas naves vean solo en una distancia determinada, es decir que no sepan ver más allá de x píxeles de la pantalla, una vez que descubran mejoras 
pueden aumentar los píxeles de visión para identificar planetas más alejados)

Los recursos son recursos para otros, la tecnología es un recurso para otro, es decir todo lo wue generan lo hacen para obtener otro beneficio ya sea más dinero o una manera de producir mas dinero 

Unas reglas básicas para puedes hacer estas cosas y esto servira para esto 

Tener un sistema de puntos económicos que  valore al que mas dinero tenga otro para cada tecnología que desarrollen, puntos para el  que más territorios tenga 


--  Mesa  -- Build an Agent-Based Simulation with Mesa video

- set up a bunch of players on a map 
- They play 10 rounds of the game tiyh eaxh of neighbors
- At the end of the round they look all of their neighbors and see who did the best and adopt their strategy 

Model is the enviroment and the agent is the one making decisions 
Decide which schedule model use, watch documentation  

from mesa import Agent, Model
from mesa.time import RandomActivation
from mesa.space import MultiGrid
from mesa.datacollection import DataCollector
from mesa.batchrunner import BatchRunner

# Un coeficiente para medir cuanto de injusto es un sistema 
def compute_gini(model):
    agent_wealths = [agent.wealth for agent in model.schedule.agents]
    x = sorted(agent_wealths)
    N = model.num_agents
    B = sum(xi * (N - i) for i, xi in enumerate(x)) / (N * sum(x))
    return (1 + (1 / N) - 2 * B)

class MoneyAgent(Agent):
    """An agent with hopes, dreams, and a mysterious past."""
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)
        # Every agent starts with 1 money
        self.wealth = 1

    def step(self):
        self.move()
        if self.wealth > 0:
          self.give_money()

    def move(self):
        possible_steps = self.model.grid.get_neighborhood(
          self.pos,
          moore=False,
          include_center=True
        )
        new_position = self.random.choice(possible_steps)
        self.model.grid.move_agent(self, new_position)

    def give_money(self):
      cellmates = self.model.grid.get_cell_list_contents([self.pos])
      if len(cellmates) > 1:
        other = self.random.choice(cellmates)
        other.wealth += 1
        self.wealth -= 1


class MoneyModel(Model):
    """Our model--a home for our agents :"""
    def __init__(self, N, width, height):
        self.num_agents = N
        # A physical world to place our agents in 
        self.grid = MultiGrid(width, height, True)
        self.schedule = RandomActivation(self)
        self.running = True

        for i in range(self.num_agents):
          a = MoneyAgent(i, self)
          self.schedule.add(a)
          x = self.random.randrange(self.grid.width)  //Self.ramdom permte que todas las simulaciones sean con el mismo valor aleatorio
          y = self.random.randrange(self.grid.height)
          self.grid.place_agent(a, (x, y))

        # Some metrics we'll measure about our model
        self.datacollector = DataCollector(
            model_reporters={"Gini": compute_gini},
            agent_reporters={"Wealth": "wealth"},
        )

    def step(self):
        """Runs a single tick of the clock in our simulation."""
        self.datacollector.collect(self)
        self.schedule.step()

Posiciones del get_neighbors para determinar las posiciones de los estados del agentes
[(-1,-1), (-1,0), (-1,1), (0,-1),(0,1),(1,-1),(1,0),(1,1)]
diagonal inferior izquierda , izquierda, diagonal superior izquierda, abajo, arriba, diagonal inferior derecha, derecha, diagonal superior derecha
Osea next_moves = [LLD, L, ULD, D, U, LRD, R, URD]

moves = [(18, 9), (18, 10), (18, 11), (19, 9), (19, 11), (0, 9), (0, 10), (0, 11)]
action_space = {"LLD": 0, "L": 1, "ULD": 2, "D": 3, "U": 4, "LRD": 5, "R": 6, "URD": 7, "F": "Factory", "W": "Weapon"}
possible_actions = ["LLD", "L", "ULD", "D", "U", "LRD", "R", "URD", "F", "W"]
moves_action = ["LLD", "L", "ULD", "D", "U", "LRD", "R", "URD"]
action  = random.choice(list(action_space.keys()))
print(action)
if action in moves_action:
    print(moves[action_space.get(action)])

Como ejecutar de manera dinamica y cambiar atributos del modelo
Forma de modificar los atributos en ejecucion mediante los metodos exec, parecido a poner una condicion y ejecutarlo directamente
Para que funcione el codigo de exec tiene que estar pegado sin ningun tab ni espacio 

        if self.step_count % 10 == 0: 
            code = """
print(self.step_count)
for elemento in dir(self):
    print(elemento)
    # setattr(lista1, "producto" + str(i), elemento)
    
print(dir(self))

for i in dir(self):
    if i.startswith("_"):
        continue
    elif i == "list_agents":
        random_agent = self.__getattribute__(i)[0]
        random_agent.setAgentColor("black")
"""
            exec(code)

Formas de modificar un atributo desde un input.
# Ejemplo (M  nombre_var tipo_var valor) ó (A id(0-{}) nombre_var tipo_var valor): """.format(len(self.list_agents))).lower()
#             if new_atribute == "":
#                 pass
#             else:
#                 if re.match("^m\s[a-z(0-9)?]+\s(int|bool|float|str)\s[a-z0-9]+" + "|" + "^a\s[0-9]\s[a-z(0-9)?]+\s(int|bool|float|str)\s[a-z0-9]+",
#                             new_atribute):
#                     method_attributes = new_atribute.split()
#                     if len(method_attributes) == 5:
#                         self.addAttribute(class_name=method_attributes[0], attribute_name=method_attributes[2],
#                                         new_type=method_attributes[3], value=method_attributes[4], id=method_attributes[1])
#                     else:
#                         self.addAttribute(class_name=method_attributes[0], attribute_name=method_attributes[1],
#                                         new_type=method_attributes[2], value=method_attributes[3])
#                     print(self.__getattribute__(method_attributes[1]))
#             code = """
# print(self.step_count)
# setattr(self, "allies", False)

# print(dir(self))

# for i in dir(self):
#     if i.startswith("_"):
#         continue
#     elif i == "list_agents":
#         random_agent = self.__getattribute__(i)[0]
#         random_agent.setAgentColor("black")
# """
#             exec(code)
#             self.allies = True
#             print(self.allies)